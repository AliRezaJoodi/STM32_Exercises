// GitHub Account: GitHub.com/AliRezaJoodi
// Bare Metal Programming

// CRC32 introduction
// Standard:			IEEE 802.3
// Polynomial:		0x04C11DB7
// Default Value:	0xFFFFFFFF 

/*
It's about:
	CRC_DR:		Data register
	CRC_IDR: 	Independent data register
	CRC_CR: 	Control register
*/

#ifndef _STM32F1xx_BM_CRC32_INCLUDED
#define _STM32F1xx_BM_CRC32_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

#include <stm32f1xx.h>

#include <utility.h>
#include <stm32f1xx_bm_bus.h>
#include <timeout.h>

/*
CRC_DR:	Data register
				Used as an input register when writing new data into the CRC calculator.
				Holds the previous CRC calculation result when it is read.
*/

__STATIC_INLINE void CRC32_FeedDataIn32Bits(uint32_t data){
  CRC->DR = data;
}

__STATIC_INLINE uint32_t CRC32_ReadValue(void){
	uint32_t crc32 = CRC->DR;
  return crc32;
}

/*
CRC_IDR:	Independent data register
					General-purpose 8-bit data register bits
					Can be used as a temporary storage location for one byte.
					This register is not affected by CRC resets generated by the RESET bit in the CRC_CR register.
*/

__STATIC_INLINE void CRC32_FeedDataIn8Bits(uint8_t data){
  CRC->IDR = data;
}

/*
RESET:	RESET bit
				1 Bit, Set by software, Cleared by hardware
				Resets the CRC calculation unit and sets the data register to 0xFFFFFFFF.
*/

__STATIC_INLINE uint32_t CRC32_ResetValue(void){
	SetBit(CRC->CR, CRC_CR_RESET_Pos);
	
	#ifdef TIMEOUT_INCLUDED
		return ( Timeout_WaitUntil(CRC32_ReadValue, 0xFFFFFFFF) );
	#else
		return 0;
	#endif
}

//**********************************************************
uint32_t CRC32_Calculate(uint32_t *data, uint32_t length);


#ifdef __cplusplus
}
#endif

#endif		// _STM32F1xx_BM_CRC32_INCLUDED